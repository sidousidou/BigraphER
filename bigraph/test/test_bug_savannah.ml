open Bigraph
module S = Solver.Make_SAT (Solver.MS)

let s5 = "{(0, Field:0),(1, Aura:1),(2, Aura:1),(3, Aura:1),(4, Child:1),(5, Child:1),(6, Child:1),(7, Aura:1),(8, Locale:1),(9, Lion:1),(10, Lion:1),(11, Area(1):1),(12, GPS(2):1),(13, GPS(3):1),(14, Area(2):1),(15, Area(0):1),(16, GPS(8):1),(17, Locale:1),(18, GPS(1):1),(19, GPS(0):1),(20, Childattack:1),(21, Localeattack:1),(22, Lionattack:2),(23, Impalaseen:2),(24, Lion:1)}
3 25 0
1111000100000000000000000
0000000010000000010001000
0000000000010011000000000
0000000000000000000000000
0000111000000000000000000
0000111000000000000000000
0000111000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000010000
0000000001100000000000000
0000000000000000000000000
0000000000000000000000000
0000000000001100000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000101100000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000111
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
({}, {}, {(1, 1), (4, 1), (18, 1), (24, 1)})
({}, {}, {(2, 1), (5, 1), (9, 1), (12, 1)})
({}, {}, {(3, 1), (6, 1), (10, 1), (13, 1)})
({}, {}, {(7, 1), (16, 1), (20, 1), (22, 1)})
({}, {}, {(8, 1), (11, 1)})
({}, {}, {(14, 1), (17, 1)})
({}, {}, {(15, 1), (21, 1)})
({}, {}, {(19, 1), (23, 1)})
({}, {}, {(22, 1), (23, 1)})
"
|> Big.of_string
and p = "{(0, Child:1),(1, Childattack:1),(2, Lion:1),(3, Lionattack:2),(4, Impalaseen:2)}
3 5 0
10000
01000
00111
00000
00000
00000
00000
00000
({}, {a}, {(0, 1), (2, 1)})
({}, {a'}, {(1, 1), (3, 1)})
({}, {b}, {(4, 1)})
({}, {}, {(3, 1), (4, 1)})
"
|> Big.of_string

let () =
    print_endline @@ "Occurrences:\n"
                     ^ (S.occurrences ~target:s5 ~pattern:p
                        |> List.map (fun o ->
                               Solver.((Iso.to_string o.nodes) ^ ", "
                                       ^ (Iso.to_string o.edges) ^ ", "
                                       ^ (Fun.to_string o.hyper_edges)))
                        |> String.concat "\n");
    exit 0
