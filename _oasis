OASISFormat:	0.4
Name:		bigrapher
Version:	1.7.0
Synopsis:	Implementation of bigraphical reactive systems
Description: BigraphER is an efficient implementation of Bigraphical Reactive
 Systems (BRS) that supports bigraphs with sharing, stochastic and probabilistic
 reaction rules, rule priorities, graphical output and predicate
 checking. Models can be exported to probabilistic model checker PRISM.

Authors:	Michele Sevegnani
Maintainers: 	Michele Sevegnani <Michele.Sevegnani@glasgow.ac.uk>
License:     	BSD-2-clause
LicenseFile:	LICENSE.md
OCamlVersion:	>= 4.02.0
Plugins:     	META (0.4), DevFiles (0.4)
Homepage:    	http://www.dcs.gla.ac.uk/~michele/bigrapher.html
BuildTools:	ocamlbuild, menhir
FilesAB:       	bin/version.ml.ab,
                opam/opam.ab,
                README.md.ab,
                Makefile.config.ab
AlphaFeatures:  ocamlbuild_more_args
XOCamlbuildExtraArgs: -j 4

Executable bigrapher
  Path:	bin
  MainIs:          bigrapher.ml
  CompiledObject:  best
  BuildDepends:	   bigraph, bigrapher-utils
  CCOpt+:	   -O3
  Install:	   true

Library "bigraph-utils"
  Path:            utils
  Modules:         Utils
  BuildDepends:    unix
  CCOpt+:	   -O3
  Install:	   false

Library "bigrapher-utils"
  Path:            bin
  Modules:	   Version,
                   Cmd,
                   Ast,
                   Store,
                   Loc,
                   Lexer,
                   Parser,
                   Export,
                   Unify
  BuildDepends:    bigraph-utils, str, big_json
  CCOpt+:	   -O3
  Install:	   false

SourceRepository master
  Type:     	   git
  Location: 	   https://mseve@bitbucket.org/mseve/bigrapher.git
  Branch: 	   master
  Browser: 	   https://bitbucket.org/mseve/bigrapher

Library "junit"
  Path:            tests
  Modules:         Junit
  Install:	   false
  Build$:          flag(tests)

Executable "parser-test"
  Path:            tests
  MainIs:     	   test_parser.ml
  CompiledObject:  best
  BuildDepends:	   bigraph, bigraph-utils, junit, unix
  Install:	   false
  Build$:          flag(tests)

Test "parser"
  Run$:            flag(tests)
  TestTools:	   mkdir
  PreCommand:	   mkdir -p ./shippable/testresults
  Command:	   ./test_parser.native ./tests/files/parser.in ./shippable/testresults parser-junit.xml

Executable "cobertura"
  Path:            tests
  MainIs:     	   cobertura.ml
  CompiledObject:  best
  BuildDepends:	   junit, unix
  Install:	   false
  Build$:          flag(tests)
